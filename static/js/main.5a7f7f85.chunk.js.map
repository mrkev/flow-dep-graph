{"version":3,"sources":["logo.svg","App.js","reportWebVitals.js","index.js"],"names":["getRealId","str","arr","split","length","styleForFlowLevel","level","color","textDecoration","valueForLevel","NaN","levelForValue","value","Number","isNaN","App","useState","tree","setTree","ROOT","Object","keys","getLevelForId","id","definition","flowLevel","expanded","setExpanded","onDrop","useCallback","acceptedFiles","file","type","text","then","data","JSON","parse","useDropzone","getRootProps","getInputProps","isDragActive","style","margin","className","padding","background","map","TreeView","defaultCollapseIcon","defaultExpanded","defaultExpandIcon","onNodeSelect","_event","ids","onNodeToggle","renderTree","nodeId","expandedIds","parentId","isExpanded","indexOf","name","node","canMakeStrict","deps","children","depId","depsMinLevel","reduce","acc","dep","Math","min","console","log","TreeItem","label","Array","isArray","child","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.5a7f7f85.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.103b5fa1.svg\";","import logo from \"./logo.svg\";\nimport \"./App.css\";\nimport Button from \"@material-ui/core/Button\";\nimport TreeView from \"@material-ui/lab/TreeView\";\nimport TreeItem from \"@material-ui/lab/TreeItem\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport ExpandMoreIcon from \"@material-ui/icons/ExpandMore\";\nimport ChevronRightIcon from \"@material-ui/icons/ChevronRight\";\nimport { useState, useCallback } from \"react\";\nimport { useDropzone } from \"react-dropzone\";\n\nconst getRealId = (str) => {\n  const arr = str.split(\">\");\n  return arr[arr.length - 1];\n};\n\nfunction styleForFlowLevel(level) {\n  switch (level) {\n    case \"none\":\n      return { color: \"red\" };\n    case \"flow\":\n      return { color: \"#C90\" };\n    case \"strict-local\":\n      return { color: \"#060\" };\n    case \"strict\":\n      return { color: \"gray\", textDecoration: \"line-through\" };\n    case \"unknown\":\n      return { color: \"purple\" };\n    default:\n      return { color: \"black\" };\n  }\n}\n\nfunction valueForLevel(level) {\n  switch (level) {\n    case \"none\":\n      return 1;\n    case \"flow\":\n      return 2;\n    case \"strict-local\":\n      return 3;\n    case \"strict\":\n      return 4;\n    case \"unknown\":\n      return NaN;\n    default:\n      return NaN;\n  }\n}\n\nfunction levelForValue(value) {\n  if (Number.isNaN(value)) {\n    return \"unknown\";\n  }\n  switch (value) {\n    case 1:\n      return \"none\";\n    case 2:\n      return \"flow\";\n    case 3:\n      return \"strict-local\";\n    case 4:\n      return \"strict\";\n    default:\n      return \"unknown\";\n  }\n}\n\nfunction App() {\n  const [tree, setTree] = useState(null);\n  const ROOT = tree && Object.keys(tree)[0];\n  // Renders our tree by dynamically creating nodes.\n  // Since our tree could have cycles, we create children for a node\n  // dynamically based on wether our parent is expanded (and we're showing).\n  // If I'm not expanded, I still want to create my children if I'm visible\n  // (ie, if my parent is expanded), so that I recieve onNodeToggle events.\n  // Note: since each tree item needs a unique id (so that it can be expanded\n  // independently of other appearances of the same node in the tree), we give\n  // each item its path as an \"id\". This path is the ids of all its parents\n  // concatenated by \">\". We can use this id to get the \"real\" id of an item\n  // too, to lookup in our data source, by just getting the last id in the\n  // \">\"-joined chain/path.\n  const renderTree = (nodeId, expandedIds, parentId = null) => {\n    const isExpanded = (id) => expandedIds.indexOf(id) !== -1;\n\n    const definition = tree[getRealId(nodeId)];\n    const name = definition ? definition.name : getRealId(nodeId);\n    const node = { id: nodeId, name };\n    const flowLevel = getLevelForId(node.id);\n    let canMakeStrict = false;\n\n    // console.log(node.id, expandedIds);\n    if (parentId == null || isExpanded(parentId)) {\n      if (!definition) {\n        console.log(\"no def for\", getRealId(node.id));\n      } else {\n        const deps = tree[getRealId(node.id)].deps;\n        node.children = deps.map((depId) => {\n          return node.id + \">\" + depId;\n        });\n\n        const depsMinLevel = deps.reduce((acc, dep) => {\n          const level = getLevelForId(dep);\n          return Math.min(acc, valueForLevel(level));\n        }, valueForLevel(\"strict\"));\n\n        if (\n          (levelForValue(depsMinLevel) === \"strict\" ||\n            levelForValue(depsMinLevel) === \"strict-local\") &&\n          flowLevel !== \"strict\"\n        ) {\n          canMakeStrict = true;\n        }\n      }\n    }\n    return (\n      <TreeItem\n        key={node.id}\n        nodeId={node.id}\n        style={styleForFlowLevel(flowLevel)}\n        label={(canMakeStrict ? \"⬆️ \" : \"\") + node.name}\n      >\n        {Array.isArray(node.children)\n          ? node.children.map((child) =>\n              renderTree(child, expandedIds, node.id)\n            )\n          : null}\n      </TreeItem>\n    );\n  };\n\n  function getLevelForId(id) {\n    const definition = tree[getRealId(id)];\n    const flowLevel = definition ? definition.flowLevel : \"unknown\";\n    return flowLevel;\n  }\n\n  const [expanded, setExpanded] = useState([ROOT]);\n  const onDrop = useCallback((acceptedFiles) => {\n    const file = acceptedFiles[0];\n\n    if (file.type !== \"application/json\") {\n      return;\n    }\n    file.text().then(function (data) {\n      setTree(JSON.parse(data));\n    });\n  }, []);\n  const { getRootProps, getInputProps, isDragActive } = useDropzone({ onDrop });\n\n  return (\n    <div style={{ margin: \"0px 12%\" }}>\n      <h1>flow-dep-graph</h1>\n      {!tree && (\n        <div {...getRootProps()} className=\"dropzone\">\n          <input {...getInputProps()} />\n          {isDragActive ? (\n            <p>Drop the files here ...</p>\n          ) : (\n            <p>Drag 'n' drop some files here, or click to select files</p>\n          )}\n        </div>\n      )}\n      <p style={{ padding: \"16px 18px\", background: \"#EEE\" }}>\n        Flow levels:\n        <ul>\n          {[\"none\", \"flow\", \"strict-local\", \"strict\", \"unknown\"].map(\n            (level) => (\n              <li style={styleForFlowLevel(level)} key={level}>\n                {level}\n              </li>\n            )\n          )}\n        </ul>\n        Items marked with ⬆️ have all-strict deps, and be upgraded to \"strict\".\n      </p>\n      <hr />\n      {tree !== null && (\n        <TreeView\n          defaultCollapseIcon={<ExpandMoreIcon />}\n          defaultExpanded={[ROOT]}\n          defaultExpandIcon={<ChevronRightIcon />}\n          onNodeSelect={function (_event, ids) {\n            // console.log(\"selected\", ids);\n          }}\n          expanded={expanded}\n          onNodeToggle={(_event, expanded) => {\n            setExpanded(expanded);\n            // console.log(\"toggled\", expanded);\n          }}\n        >\n          {renderTree(ROOT, expanded)}\n        </TreeView>\n      )}\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}